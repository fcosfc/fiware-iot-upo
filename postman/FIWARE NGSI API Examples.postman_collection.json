{
	"info": {
		"_postman_id": "e22a562e-fb9f-470c-8686-cdfda74d7e41",
		"name": "FIWARE NGSI API Examples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "System status",
			"item": [
				{
					"name": "Context Broker Version Information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{orion}}/version/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"version",
								""
							]
						},
						"description": "Once the Orion Context Broker is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see two containers running. If orion is not running, you can restart the containers as necessary."
					},
					"response": []
				},
				{
					"name": "Iot Agent Version Information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{iot-agent}}/version",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"version"
							]
						},
						"description": "Once the Orion Context Broker is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see two containers running. If orion is not running, you can restart the containers as necessary."
					},
					"response": []
				}
			]
		},
		{
			"name": "Weather Stations",
			"item": [
				{
					"name": "Create one station",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"urn:ngsi-ld:WeatherStation:004\",\n    \"type\": \"WeatherStation\",\n    \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Tarifa\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create several stations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionType\": \"append\",\n    \"entities\": [\n  \t    {\n            \"id\": \"urn:ngsi-ld:WeatherStation:005\",\n            \"type\": \"WeatherStation\",\n            \"name\": {\n                \"type\": \"Text\",\n                \"value\": \"Jimena de la Frontera\"\n            }\n        },\n  \t    {\n            \"id\": \"urn:ngsi-ld:WeatherStation:006\",\n            \"type\": \"WeatherStation\",\n            \"name\": {\n                \"type\": \"Text\",\n                \"value\": \"Castellar de la Frontera\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve all stations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{orion}}/v2/entities/?type=WeatherStation&options=keyValues",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherStation"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						},
						"description": "This example returns the full data context"
					},
					"response": []
				},
				{
					"name": "Update station name attribute",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"Jimena\",\n    \"type\": \"Text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:WeatherStation:005/attrs/name",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:WeatherStation:005",
								"attrs",
								"name"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain station by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:WeatherStation:001?options=keyValues&type=WeatherStation",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:WeatherStation:001"
							],
							"query": [
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								},
								{
									"key": "type",
									"value": "WeatherStation",
									"description": "Entity type, to avoid ambiguity in case there are several entities with the same entity id"
								},
								{
									"key": "attrs",
									"value": "name",
									"description": "Ordered list of attribute names to display",
									"disabled": true
								}
							]
						},
						"description": "This example returns the context data of `store1`. The `id` of the entity should be unique or the `type` parameter should also be used.\n\nBecause of the use of the `options=keyValues`, the response consists of JSON only without the attribute `type` elements."
					},
					"response": []
				}
			]
		},
		{
			"name": "Sensors",
			"item": [
				{
					"name": "Retrieve all temperature sensors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://{{orion}}/v2/entities/?type=TemperatureSensor&options=keyValues",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "TemperatureSensor"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						},
						"description": "This example returns the full data context"
					},
					"response": []
				},
				{
					"name": "Create several sensors",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\":   \"temperature004\",\n            \"entity_name\": \"urn:ngsi-ld:TemperatureSensor:004\",\n            \"entity_type\": \"TemperatureSensor\",\n            \"protocol\":    \"PDI-IoTA-UltraLight\",\n            \"transport\":   \"MQTT\",\n            \"timezone\":    \"Europe/Madrid\",\n            \"attributes\": [\n                { \n                    \"object_id\": \"t\", \n                    \"name\": \"temperature\", \n                    \"type\": \"Float\" \n                }\n            ],\n            \"static_attributes\": [\n                {            \n                    \"name\": \"location\",\n                    \"type\": \"geo:json\",\n                    \"value\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [36.02, -5.61]\n                    }\n                },\n                { \n                    \"name\":\"refWeatherStation\", \n                    \"type\": \"Relationship\", \n                    \"value\": \"urn:ngsi-ld:WeatherStation:004\"\n                }\n            ]\n        },\n        {\n            \"device_id\":   \"temperature005\",\n            \"entity_name\": \"urn:ngsi-ld:TemperatureSensor:005\",\n            \"entity_type\": \"TemperatureSensor\",\n            \"protocol\":    \"PDI-IoTA-UltraLight\",\n            \"transport\":   \"MQTT\",\n            \"timezone\":    \"Europe/Madrid\",\n            \"attributes\": [\n                { \n                    \"object_id\": \"t\", \n                    \"name\": \"temperature\", \n                    \"type\": \"Float\" \n                }\n            ],\n            \"static_attributes\": [\n                {            \n                    \"name\": \"location\",\n                    \"type\": \"geo:json\",\n                    \"value\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [36.43, -5.45]\n                    }\n                },\n                { \n                    \"name\":\"refWeatherStation\", \n                    \"type\": \"Relationship\", \n                    \"value\": \"urn:ngsi-ld:WeatherStation:005\"\n                }\n            ]\n        },\n        {\n            \"device_id\":   \"temperature006\",\n            \"entity_name\": \"urn:ngsi-ld:TemperatureSensor:006\",\n            \"entity_type\": \"TemperatureSensor\",\n            \"protocol\":    \"PDI-IoTA-UltraLight\",\n            \"transport\":   \"MQTT\",\n            \"timezone\":    \"Europe/Madrid\",\n            \"attributes\": [\n                { \n                    \"object_id\": \"t\", \n                    \"name\": \"temperature\", \n                    \"type\": \"Float\" \n                }\n            ],\n            \"static_attributes\": [\n                {            \n                    \"name\": \"location\",\n                    \"type\": \"geo:json\",\n                    \"value\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [36.29,-5.42]\n                    }\n                },\n                { \n                    \"name\":\"refWeatherStation\", \n                    \"type\": \"Relationship\", \n                    \"value\": \"urn:ngsi-ld:WeatherStation:006\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter sensors by distance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://{{orion}}/v2/entities/?georel=near;maxDistance:15000&geometry=point&coords=-5.30,36.30&type=TemperatureSensor&options=keyValues",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "georel",
									"value": "near;maxDistance:15000"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coords",
									"value": "-5.30,36.30"
								},
								{
									"key": "type",
									"value": "TemperatureSensor",
									"description": "Entity type, to avoid ambiguity in case there are several entities with the same entity id"
								},
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								},
								{
									"key": "attrs",
									"value": "name",
									"description": "Ordered list of attribute names to display",
									"disabled": true
								}
							]
						},
						"description": "## Filter context data by comparing the values of a geo:point attribute\n\nThis example returns the data of all `Store` entities found within 1.5km the **Brandenburg Gate**  in **Berlin** (*52.5162N 13.3777W*)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Actuators",
			"item": [
				{
					"name": "Retrieve all alarm actuators",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://{{orion}}/v2/entities/?type=AlarmActuator&options=keyValues",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AlarmActuator"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						},
						"description": "This example returns the full data context"
					},
					"response": []
				},
				{
					"name": "Ring an alarm from IotAgent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionType\": \"update\",\n    \"entities\": [\n        {\n            \"type\": \"AlarmActuator\",\n            \"id\": \"urn:ngsi-ld:AlarmActuator:001\",\n            \"ring\" : {\n                \"type\": \"command\",\n                \"value\": \"\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{iot-agent}}/v2/op/update",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"v2",
								"op",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ring an alarm from Context Broker Copy",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "iware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"ring\": { \n        \"type\" : \"command\", \n        \"value\" : \"\" \n    } \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:AlarmActuator:001/attrs",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:AlarmActuator:001",
								"attrs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "Create a Subscription",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Test subscription\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \".*\",\n        \"type\": \"TemperatureSensor\"\n      }\n    ]\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://testsubscriber:8080/test\"\n    },\n    \"attrsFormat\": \"keyValues\",\n    \"attrs\": [\n      \"TimeInstant\",\n      \"temperature\",\n      \"location\",\n      \"refWeatherStation\"\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							],
							"query": [
								{
									"key": "options",
									"value": "keyValues",
									"disabled": true
								}
							]
						},
						"description": "NGSI-LD subscriptions can be set up using the `/ngsi-ld/v1/subscriptions/` endpoint and in a similar manner to the\nNGSI-v2 `/v2/subscriptions` endpoint. The payload body is slightly different however. Firstly the linked data `@context`\nmust be present either as an attribute or in the `Link` header. If the `@context` is placed in the body the\n`Context-Type` header must state that the payload is `application/ld+json` - i.e. Linked Data plus JSON. The supplied\n`@context` will also be used when making notifications as part of the notification request.\n\nThe `type` of the NGSI-LD subscription request is always `type=Subscription`. The structure of the subscription has\nchanged. When setting up a subscription, there is no longer a separate `subject` section to the payload, entities to\nwatch and trigger conditions are now set at the same level as the `description` of the subscription.\n\n-   `condition.attrs` has been moved up a level and renamed to `watchedAttributes`\n-   `condition.expression` has been moved up a level and renamed to `q`\n\nThe `notification` section of the body states that once the conditions of the subscription have been met, a POST request\ncontaining all affected Shelf entities will be sent to the URL `http://tutorial:3000/subscription/low-stock-store001`.\nIt is now possible to amend the notification payload by requesting `notification.format=keyValues` and remove the\n`@context` from the notification body by stating `notification.endpoint.accept=application/json`. The `@context` is not\nlost, it is merely passed as a `Link` header. In summary, all of the flags within a subscription work in the same manner\nas a GET request to the context broker itself. If no flags are set, a full NGSI-LD response including the `@context` is\nreturned by default, and the payload can be reduced and amended by adding in further restriction"
					},
					"response": []
				},
				{
					"name": "Retrieve all subscriptions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "iotupo",
								"type": "default"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orion",
			"value": "localhost:1026",
			"type": "default"
		},
		{
			"key": "iot-agent",
			"value": "localhost:4041",
			"type": "default"
		}
	]
}